[gd_scene load_steps=8 format=3 uid="uid://db1vdxvi12c80"]

[ext_resource type="FontFile" uid="uid://depje1lfv5nx8" path="res://fonts/morris-roman/MorrisRoman-Black.ttf" id="1_qlmxe"]
[ext_resource type="FontFile" uid="uid://dhgnmjhvybfng" path="res://fonts/Arial Narrow/arialnarrow.ttf" id="2_j7qfc"]

[sub_resource type="GDScript" id="GDScript_2yeg7"]
script/source = "extends CanvasLayer

const INVENTORY_SIZE := Inventory.INVENTORY_SIZE

const InventorySlotPrefab := preload(\"res://prefabs/inventory_slot.tscn\")
var active_slot := 0
var cols : int
func _ready() -> void:
	cols = %SlotGrid.columns
	PlayerState.inventory.changed.connect(render_slots)
	render_slots()
	set_slot_active(0)

func render_slots() -> void:
	for child in %SlotGrid.get_children():
		child.queue_free()
	
	for slot in PlayerState.inventory.item_slots:
		var inventory_slot := InventorySlotPrefab.instantiate()
		
		inventory_slot.data = slot
		inventory_slot.active = false
		
		%SlotGrid.add_child(
			inventory_slot
		)

# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(_delta: float) -> void:
	if Input.is_action_just_pressed(\"move_right\"):
		active_slot = (active_slot + 1) if active_slot + 1 < INVENTORY_SIZE else 0
		set_slot_active(active_slot)
	elif Input.is_action_just_pressed(\"move_left\"):
		active_slot = (active_slot - 1) if active_slot - 1 >= 0 else INVENTORY_SIZE - 1
		set_slot_active(active_slot)
	
	
	if Input.is_key_pressed(KEY_D):
		PlayerState.inventory.remove_item(active_slot)
		%Tooltip.visible = false

func set_slot_active(active_slot_idx: int) -> void:
	if %SlotGrid.get_child_count() == 0:
		return
	
	for slot_idx in Inventory.INVENTORY_SIZE:
		var slot := %SlotGrid.get_child(slot_idx)
		slot.set_active(slot_idx == active_slot_idx)
	
		if slot.active:
			var data := PlayerState.inventory.item_slots[slot_idx]
			if data == null:
				%Tooltip.visible = false
			else:
				var prefix := (\"%dx \" % [data.quantity]) if data.quantity > 1 else \"\"
				%ItemName.text = prefix + data.item.name
				#%ItemName.label_settings.color = get_quality_color(data.item.quality)
				%Description.text = data.item.description
				%Tooltip.visible = true
		
func get_quality_color(quality: Item.ItemQuality) -> Color:
		if quality == Item.ItemQuality.Junk:
			return Color.DIM_GRAY
		elif quality == Item.ItemQuality.Common:
			return Color.WHITE_SMOKE			
		elif quality == Item.ItemQuality.Uncommon:
			return Color.LIME_GREEN
		elif quality == Item.ItemQuality.Rare:
			return Color.ROYAL_BLUE
		elif quality == Item.ItemQuality.Epic:
			return Color.DARK_ORCHID
		elif quality == Item.ItemQuality.Legendary:
			return Color.DARK_ORANGE
		return Color.BLACK
		
"

[sub_resource type="LabelSettings" id="LabelSettings_j7qfc"]
font = ExtResource("1_qlmxe")
font_size = 24
font_color = Color(0.184314, 1, 0.168627, 1)

[sub_resource type="LabelSettings" id="LabelSettings_2yeg7"]
font = ExtResource("2_j7qfc")
font_size = 18
font_color = Color(1, 1, 0.376471, 1)

[sub_resource type="LabelSettings" id="LabelSettings_qlmxe"]
font = ExtResource("2_j7qfc")
font_color = Color(0, 0.768627, 1, 1)

[sub_resource type="GDScript" id="GDScript_qlmxe"]
script/source = "extends Button


# Called when the node enters the scene tree for the first time.
func _ready() -> void:
	pressed.connect(func():
		PlayerState.inventory.store_item_quantity(Consts.ITEM_PLANT_FIBER, 10))


# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(_delta: float) -> void:
	pass
"

[node name="CanvasLayer" type="CanvasLayer"]
script = SubResource("GDScript_2yeg7")

[node name="CenterContainer" type="MarginContainer" parent="."]
anchors_preset = -1
anchor_left = 0.516
anchor_top = 0.294
anchor_right = 0.881
anchor_bottom = 0.756
offset_left = -390.72
offset_top = -32.52
offset_right = -391.52
offset_bottom = -31.48
pivot_offset = Vector2(350, 250)

[node name="ColorRect" type="ColorRect" parent="CenterContainer"]
layout_mode = 2
color = Color(0.219608, 0.219608, 0.219608, 0.784314)

[node name="MarginContainer" type="MarginContainer" parent="CenterContainer"]
layout_mode = 2
theme_override_constants/margin_left = 20
theme_override_constants/margin_top = 20
theme_override_constants/margin_right = 20
theme_override_constants/margin_bottom = 20

[node name="HBoxContainer" type="HBoxContainer" parent="CenterContainer/MarginContainer"]
layout_mode = 2
alignment = 1

[node name="SlotGrid" type="GridContainer" parent="CenterContainer/MarginContainer/HBoxContainer"]
unique_name_in_owner = true
custom_minimum_size = Vector2(100, 150)
layout_mode = 2
size_flags_horizontal = 3
columns = 4

[node name="MarginContainer" type="MarginContainer" parent="CenterContainer/MarginContainer/HBoxContainer"]
layout_mode = 2
size_flags_horizontal = 3
theme_override_constants/margin_left = 3
theme_override_constants/margin_top = 3
theme_override_constants/margin_right = 3
theme_override_constants/margin_bottom = 3

[node name="Tooltip" type="MarginContainer" parent="CenterContainer/MarginContainer/HBoxContainer/MarginContainer"]
unique_name_in_owner = true
custom_minimum_size = Vector2(300, 50)
layout_mode = 2

[node name="ColorRect" type="ColorRect" parent="CenterContainer/MarginContainer/HBoxContainer/MarginContainer/Tooltip"]
visible = false
layout_mode = 2
color = Color(0.219608, 0.219608, 0.219608, 0.784314)

[node name="VBoxContainer" type="VBoxContainer" parent="CenterContainer/MarginContainer/HBoxContainer/MarginContainer/Tooltip"]
layout_mode = 2

[node name="MarginContainer3" type="MarginContainer" parent="CenterContainer/MarginContainer/HBoxContainer/MarginContainer/Tooltip/VBoxContainer"]
layout_mode = 2
size_flags_vertical = 3
theme_override_constants/margin_left = 5
theme_override_constants/margin_top = 15
theme_override_constants/margin_right = 5

[node name="ItemName" type="Label" parent="CenterContainer/MarginContainer/HBoxContainer/MarginContainer/Tooltip/VBoxContainer/MarginContainer3"]
unique_name_in_owner = true
custom_minimum_size = Vector2(0, 35)
layout_mode = 2
size_flags_vertical = 1
text = "Item Name"
label_settings = SubResource("LabelSettings_j7qfc")

[node name="MarginContainer" type="MarginContainer" parent="CenterContainer/MarginContainer/HBoxContainer/MarginContainer/Tooltip/VBoxContainer"]
layout_mode = 2
size_flags_vertical = 3
theme_override_constants/margin_left = 5
theme_override_constants/margin_top = 20
theme_override_constants/margin_right = 5

[node name="Description" type="Label" parent="CenterContainer/MarginContainer/HBoxContainer/MarginContainer/Tooltip/VBoxContainer/MarginContainer"]
unique_name_in_owner = true
custom_minimum_size = Vector2(200, 0)
layout_mode = 2
size_flags_vertical = 1
text = "Some short item description goes here."
label_settings = SubResource("LabelSettings_2yeg7")
autowrap_mode = 3

[node name="MarginContainer2" type="MarginContainer" parent="CenterContainer/MarginContainer/HBoxContainer/MarginContainer/Tooltip/VBoxContainer"]
layout_mode = 2
size_flags_vertical = 3
theme_override_constants/margin_left = 5
theme_override_constants/margin_top = 20
theme_override_constants/margin_right = 5

[node name="Description2" type="Label" parent="CenterContainer/MarginContainer/HBoxContainer/MarginContainer/Tooltip/VBoxContainer/MarginContainer2"]
custom_minimum_size = Vector2(200, 0)
layout_mode = 2
text = "Options:
  (D)elete Item"
label_settings = SubResource("LabelSettings_qlmxe")
autowrap_mode = 3

[node name="DebugAddPlantFiber" type="Button" parent="."]
offset_left = 861.0
offset_top = 52.0
offset_right = 1035.0
offset_bottom = 99.0
text = "Add 10x Plant Fiber"
script = SubResource("GDScript_qlmxe")
